#SPDX-License-Identifier: MIT-0
---
- name: Check if base template images exist
  stat:
    path: "{{ item.base_path }}"
  register: template_status
  loop: "{{ vm_instances }}"
  loop_control:
    label: "{{ item.name }}"

- name: Fail if any template image doesn't exist
  fail:
    msg: "Template image {{ item.item.base_path }} for VM {{ item.item.name }} does not exist."
  when: not item.stat.exists
  loop: "{{ template_status.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Check if VM disk exists
  stat:
    path: "{{ item.disk_path }}"
  register: disk_exists
  loop: "{{ vm_instances }}"
  loop_control:
    label: "{{ item.name }}"
    index_var: disk_index

# For new disks with specified size, create them with the specified size
- name: Create VM disks from templates with specified size
  shell: >
    qemu-img convert -f qcow2 -O qcow2 {{ item.base_path }} {{ item.disk_path }}
    {% if item.disk_size is defined %} &&
    qemu-img resize {{ item.disk_path }} {{ item.disk_size }}{% endif %}
  loop: "{{ vm_instances }}"
  loop_control:
    label: "{{ item.name }}"
    index_var: disk_index
  when: 
    - not disk_exists.results[disk_index].stat.exists
    - item.disk_size is defined
  register: disk_created_with_size

# For new disks without specified size, just copy
- name: Create VM disks from templates without size customization
  copy:
    src: "{{ item.base_path }}"
    dest: "{{ item.disk_path }}"
    remote_src: yes
  loop: "{{ vm_instances }}"
  loop_control:
    label: "{{ item.name }}"
    index_var: disk_index
  when: 
    - not disk_exists.results[disk_index].stat.exists
    - item.disk_size is not defined
  register: disk_created

# Set a combined fact to track which disks were created in this run
- name: Set fact for created disks
  set_fact:
    disks_created: "{{ (disk_created_with_size.results if disk_created_with_size.results is defined else []) + 
                       (disk_created.results if disk_created.results is defined else []) }}"

# Basic VM customization for all newly created disks
- name: Basic VM customization
  command: >
    virt-customize -a {{ item.item.disk_path }}
    --hostname {{ item.item.name }}
    {% if item.item.root_password is defined %}
    --root-password password:{{ item.item.root_password }}
    {% endif %}
    {% if item.item.ssh_authorized_key is defined %}
    --ssh-inject root:string:"{{ item.item.ssh_authorized_key }}"
    {% endif %}
    {% if item.item.firstboot_commands is defined %}
    --firstboot-command "{{ item.item.firstboot_commands | join(' && ') }}"
    {% endif %}
  loop: "{{ disks_created }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: 
    - item.changed | default(false)
    - item.item.customize | default(true)
  register: customize_result

# Check if VMs exist
- name: Check if VMs exist
  community.libvirt.virt:
    name: "{{ item.name }}"
    command: status
  register: vm_status
  failed_when: false
  loop: "{{ vm_instances }}"
  loop_control:
    label: "{{ item.name }}"

# Determine which VMs need to be created
- name: Extract VMs that need to be created
  set_fact:
    vms_to_create: "{{ vm_instances | selectattr('name', 'in', 
                     vm_status.results | selectattr('msg', 'defined') | 
                     selectattr('msg', 'search', 'not found') | 
                     map(attribute='item.name') | list) | list }}"

# Generate and define VMs
- name: Generate VM libvirt XML for absent VMs
  command: >
    virt-install
    --name {{ item.name }}
    --memory {{ item.memory_mb | default(vm_memory_mb) }}
    --vcpus {{ item.vcpus | default(vm_vcpus) }}
    --disk {{ item.disk_path }},format=qcow2
    --network network={{ item.network }}
    --import
    --os-variant detect=on,require=off
    --noautoconsole
    --print-xml
  register: vm_xml
  changed_when: false
  failed_when: false
  loop: "{{ vms_to_create }}"
  loop_control:
    label: "{{ item.name }}"

- name: Define new VMs using XML
  community.libvirt.virt:
    command: define
    xml: "{{ item.stdout }}"
  register: vm_defined
  loop: "{{ vm_xml.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.rc == 0

# Start VMs
- name: Start newly defined VMs
  community.libvirt.virt:
    name: "{{ item.item.item.name }}"
    state: running
  loop: "{{ vm_defined.results }}"
  loop_control:
    label: "{{ item.item.item.name }}"
  when: 
    - item.changed | default(false)
    - item.item.rc == 0

# Enable autostart
- name: Enable autostart for newly defined VMs
  command: "virsh autostart {{ item.item.item.name }}"
  loop: "{{ vm_defined.results }}"
  loop_control:
    label: "{{ item.item.item.name }}"
  when: 
    - item.changed | default(false)
    - item.item.rc == 0
    - item.item.item.enable_autostart | default(true)
