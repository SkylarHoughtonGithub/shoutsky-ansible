#SPDX-License-Identifier: MIT-0
---
# tasks file for okd_haproxy_lb
# HAProxy Role Directory Structure
#
# roles/haproxy/
# ├── defaults
# │   └── main.yml
# ├── files
# ├── handlers
# │   └── main.yml
# ├── meta
# │   └── main.yml
# ├── tasks
# │   └── main.yml
# ├── templates
# │   └── haproxy.cfg.j2
# └── vars
#     └── main.yml

# roles/haproxy/defaults/main.yml
---
# Default variables for HAProxy role

# HAProxy global settings
haproxy_global_maxconn: 20000
haproxy_global_log: "/dev/log local0 info"
haproxy_global_chroot: "/var/lib/haproxy"
haproxy_global_pidfile: "/var/run/haproxy.pid"
haproxy_global_user: "haproxy"
haproxy_global_group: "haproxy"
haproxy_stats_socket: "/var/lib/haproxy/stats"

# HAProxy defaults section
haproxy_defaults_mode: "http"
haproxy_defaults_log: "global"
haproxy_defaults_option:
  - "httplog"
  - "dontlognull"
  - "http-server-close"
  - "forwardfor except 127.0.0.0/8"
  - "redispatch"
haproxy_defaults_retries: 3
haproxy_defaults_timeout:
  - "http-request 10s"
  - "queue 1m"
  - "connect 10s"
  - "client 300s"
  - "server 300s"
  - "http-keep-alive 10s"
  - "check 10s"
haproxy_defaults_maxconn: 20000

# HAProxy stats
haproxy_stats_enable: true
haproxy_stats_bind_port: 9000
haproxy_stats_uri: "/"

# OKD specific configurations
okd_api_port: 6443
okd_machine_config_port: 22623
okd_http_port: 80
okd_https_port: 443

# Define which IPs to use in configuration
# You should override these in your inventory
bootstrap_ip: "OKD4_BOOTSTRAP_SERVER_IP"
control_plane_ips:
  - "OKD4_CONTROL_PLANE_0_IP"
  - "OKD4_CONTROL_PLANE_1_IP"
  - "OKD4_CONTROL_PLANE_2_IP"
infra_node_ips:
  - "OKD4_INFRA_NODE_0_IP"
  - "OKD4_INFRA_NODE_1_IP"

# Compute nodes can be used instead of infra nodes
compute_node_ips: []

# roles/haproxy/handlers/main.yml
---
# Handlers for HAProxy role

- name: restart haproxy
  service:
    name: haproxy
    state: restarted

- name: reload haproxy
  service:
    name: haproxy
    state: reloaded

# roles/haproxy/tasks/main.yml
---
# Tasks for HAProxy role

- name: Install HAProxy
  package:
    name: haproxy
    state: present

- name: Create backup of original config
  copy:
    src: /etc/haproxy/haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg.orig
    remote_src: yes
    force: no  # Don't overwrite if backup already exists

- name: Configure SELinux to allow HAProxy to bind to non-standard ports
  shell: |
    semanage port -a -t http_port_t -p tcp 6443 || semanage port -m -t http_port_t -p tcp 6443
    semanage port -a -t http_port_t -p tcp 22623 || semanage port -m -t http_port_t -p tcp 22623
  ignore_errors: yes  # Continue if ports are already configured
  register: semanage_result
  changed_when: semanage_result.rc == 0

- name: Generate HAProxy configuration
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: '0644'
  notify: restart haproxy

- name: Configure firewalld for HAProxy
  firewalld:
    port: "{{ item }}/tcp"
    permanent: yes
    state: enabled
  with_items:
    - "{{ okd_api_port }}"
    - "{{ okd_machine_config_port }}"
    - "{{ okd_http_port }}"
    - "{{ okd_https_port }}"
    - "{{ haproxy_stats_bind_port }}"
  ignore_errors: yes
  register: firewall_result
  changed_when: firewall_result.rc == 0
  when: ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

- name: Reload firewalld
  systemd:
    name: firewalld
    state: reloaded
  when: (ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS') and firewall_result.changed

- name: Start and enable HAProxy service
  systemd:
    name: haproxy
    state: started
    enabled: yes

# roles/haproxy/templates/haproxy.cfg.j2
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    maxconn {{ haproxy_global_maxconn }}
    log {{ haproxy_global_log }}
    chroot {{ haproxy_global_chroot }}
    pidfile {{ haproxy_global_pidfile }}
    user {{ haproxy_global_user }}
    group {{ haproxy_global_group }}
    daemon

    # Turn on stats unix socket
    stats socket {{ haproxy_stats_socket }}

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode {{ haproxy_defaults_mode }}
    log {{ haproxy_defaults_log }}
{% for option in haproxy_defaults_option %}
    option {{ option }}
{% endfor %}
    retries {{ haproxy_defaults_retries }}
{% for timeout in haproxy_defaults_timeout %}
    timeout {{ timeout }}
{% endfor %}
    maxconn {{ haproxy_defaults_maxconn }}

{% if haproxy_stats_enable %}
#---------------------------------------------------------------------
# HAProxy Stats
#---------------------------------------------------------------------
listen stats
    bind :{{ haproxy_stats_bind_port }}
    mode http
    stats enable
    stats uri {{ haproxy_stats_uri }}
{% endif %}

#---------------------------------------------------------------------
# OKD Kubernetes API Frontend
#---------------------------------------------------------------------
frontend ocp4_k8s_api_fe
    bind :{{ okd_api_port }}
    default_backend ocp4_k8s_api_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD Kubernetes API Backend
#---------------------------------------------------------------------
backend ocp4_k8s_api_be
    mode tcp
    balance source
    option httpchk GET /readyz HTTP/1.0
    option ssl-hello-chk
    http-check expect status 200
{% if bootstrap_ip != "OKD4_BOOTSTRAP_SERVER_IP" %}
    server bootstrap {{ bootstrap_ip }}:{{ okd_api_port }} check weight 1
{% endif %}
{% for ip in control_plane_ips %}
{% if ip != "OKD4_CONTROL_PLANE_0_IP" and ip != "OKD4_CONTROL_PLANE_1_IP" and ip != "OKD4_CONTROL_PLANE_2_IP" %}
    server control-plane-{{ loop.index0 }} {{ ip }}:{{ okd_api_port }} check
{% endif %}
{% endfor %}

#---------------------------------------------------------------------
# OKD Machine Config Server Frontend
#---------------------------------------------------------------------
frontend ocp4_machine_config_server_fe
    bind :{{ okd_machine_config_port }}
    default_backend ocp4_machine_config_server_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD Machine Config Server Backend
#---------------------------------------------------------------------
backend ocp4_machine_config_server_be
    mode tcp
    balance source
    option httpchk GET /healthz HTTP/1.0
    option ssl-hello-chk
    http-check expect status 200
{% if bootstrap_ip != "OKD4_BOOTSTRAP_SERVER_IP" %}
    server bootstrap {{ bootstrap_ip }}:{{ okd_machine_config_port }} check weight 1
{% endif %}
{% for ip in control_plane_ips %}
{% if ip != "OKD4_CONTROL_PLANE_0_IP" and ip != "OKD4_CONTROL_PLANE_1_IP" and ip != "OKD4_CONTROL_PLANE_2_IP" %}
    server control-plane-{{ loop.index0 }} {{ ip }}:{{ okd_machine_config_port }} check
{% endif %}
{% endfor %}

#---------------------------------------------------------------------
# OKD HTTP Ingress Frontend
#---------------------------------------------------------------------
frontend ocp4_http_ingress_traffic_fe
    bind :{{ okd_http_port }}
    default_backend ocp4_http_ingress_traffic_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD HTTP Ingress Backend
#---------------------------------------------------------------------
backend ocp4_http_ingress_traffic_be
    mode tcp
    balance source
{% if infra_node_ips | length > 0 %}
{% for ip in infra_node_ips %}
{% if ip != "OKD4_INFRA_NODE_0_IP" and ip != "OKD4_INFRA_NODE_1_IP" %}
    server infra-{{ loop.index0 }} {{ ip }}:{{ okd_http_port }} check
{% endif %}
{% endfor %}
{% elif compute_node_ips | length > 0 %}
{% for ip in compute_node_ips %}
    server compute-{{ loop.index0 }} {{ ip }}:{{ okd_http_port }} check
{% endif %}
{% endfor %}

#---------------------------------------------------------------------
# OKD HTTPS Ingress Frontend
#---------------------------------------------------------------------
frontend ocp4_https_ingress_traffic_fe
    bind :{{ okd_https_port }}
    default_backend ocp4_https_ingress_traffic_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD HTTPS Ingress Backend
#---------------------------------------------------------------------
backend ocp4_https_ingress_traffic_be
    mode tcp
    balance source
{% if infra_node_ips | length > 0 %}
{% for ip in infra_node_ips %}
{% if ip != "OKD4_INFRA_NODE_0_IP" and ip != "OKD4_INFRA_NODE_1_IP" %}
    server infra-{{ loop.index0 }} {{ ip }}:{{ okd_https_port }} check
{% endif %}
{% endfor %}
{% elif compute_node_ips | length > 0 %}
{% for ip in compute_node_ips %}
    server compute-{{ loop.index0 }} {{ ip }}:{{ okd_https_port }} check
{% endif %}
{% endfor %}

# roles/haproxy/meta/main.yml
---
galaxy_info:
  author: Your Name
  description: HAProxy role for OKD
  company: Your Company
  license: MIT
  min_ansible_version: 2.9
  platforms:
    - name: EL
      versions:
        - 7
        - 8
    - name: Fedora
      versions:
        - all
  galaxy_tags:
    - haproxy
    - okd
    - loadbalancer
    - kubernetes
    - openshift
dependencies: []