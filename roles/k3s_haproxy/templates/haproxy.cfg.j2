#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    maxconn {{ haproxy_configuration.lb_global_maxconn }}
    log {{ haproxy_configuration.lb_global_log }}
    chroot {{ haproxy_configuration.lb_global_chroot }}
    pidfile {{ haproxy_configuration.lb_global_pidfile }}
    user {{ haproxy_configuration.lb_global_user }}
    group {{ haproxy_configuration.lb_global_group }}
    daemon

    # Turn on stats unix socket
    stats socket {{ haproxy_configuration.lb_stats_socket }}

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode {{ haproxy_configuration.lb_defaults_mode }}
    log {{ haproxy_configuration.lb_defaults_log }}
{% for option in haproxy_configuration.lb_defaults_option %}
    option {{ option }}
{% endfor %}
    retries {{ haproxy_configuration.lb_defaults_retries }}
{% for timeout in haproxy_configuration.lb_defaults_timeout %}
    timeout {{ timeout }}
{% endfor %}
    maxconn {{ haproxy_configuration.lb_defaults_maxconn }}

{% if haproxy_configuration.lb_stats_enable %}
#---------------------------------------------------------------------
# HAProxy Stats
#---------------------------------------------------------------------
listen stats
    bind :{{ haproxy_configuration.lb_stats_bind_port }}
    mode http
    stats enable
    stats uri {{ haproxy_configuration.lb_stats_uri }}
{% endif %}

#---------------------------------------------------------------------
# OKD Kubernetes API Frontend
#---------------------------------------------------------------------
frontend ocp4_k8s_api_fe
    bind :{{ haproxy_configuration.ports.api }}
    default_backend ocp4_k8s_api_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD Kubernetes API Backend
#---------------------------------------------------------------------
backend ocp4_k8s_api_be
    mode tcp
    balance source
    option httpchk GET /readyz HTTP/1.0
    option ssl-hello-chk
    http-check expect status 200
{% if haproxy_configuration.nodes.bootstrap.ip != "OKD4_BOOTSTRAP_SERVER_IP" %}
    server bootstrap {{ haproxy_configuration.nodes.bootstrap.ip }}:{{ haproxy_configuration.ports.api }} check weight 1
{% endif %}
{% for ip in control_plane_ips %}
{% if ip != "OKD4_CONTROL_PLANE_0_IP" and ip != "OKD4_CONTROL_PLANE_1_IP" and ip != "OKD4_CONTROL_PLANE_2_IP" %}
    server control-plane-{{ loop.index0 }} {{ ip }}:{{ haproxy_configuration.ports.api }} check
{% endif %}
{% endfor %}

#---------------------------------------------------------------------
# OKD Machine Config Server Frontend
#---------------------------------------------------------------------
frontend ocp4_machine_config_server_fe
    bind :{{ haproxy_configuration.ports.machine_config }}
    default_backend ocp4_machine_config_server_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD Machine Config Server Backend
#---------------------------------------------------------------------
backend ocp4_machine_config_server_be
    mode tcp
    balance source
    option httpchk GET /healthz HTTP/1.0
    option ssl-hello-chk
    http-check expect status 200
{% if haproxy_configuration.nodes.bootstrap.ip != "OKD4_BOOTSTRAP_SERVER_IP" %}
    server bootstrap {{ haproxy_configuration.nodes.bootstrap.ip }}:{{ haproxy_configuration.ports.machine_config }} check weight 1
{% endif %}
{% for ip in control_plane_ips %}
{% if ip != "OKD4_CONTROL_PLANE_0_IP" and ip != "OKD4_CONTROL_PLANE_1_IP" and ip != "OKD4_CONTROL_PLANE_2_IP" %}
    server control-plane-{{ loop.index0 }} {{ ip }}:{{ haproxy_configuration.ports.machine_config }} check
{% endif %}
{% endfor %}

#---------------------------------------------------------------------
# OKD HTTP Ingress Frontend
#---------------------------------------------------------------------
frontend ocp4_http_ingress_traffic_fe
    bind :{{ haproxy_configuration.ports.http }}
    default_backend ocp4_http_ingress_traffic_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD HTTP Ingress Backend
#---------------------------------------------------------------------
backend ocp4_http_ingress_traffic_be
    mode tcp
    balance source
{% if infra_node_ips | length > 0 %}
{% for ip in infra_node_ips %}
{% if ip != "OKD4_INFRA_NODE_0_IP" and ip != "OKD4_INFRA_NODE_1_IP" %}
    server infra-{{ loop.index0 }} {{ ip }}:{{ haproxy_configuration.ports.http }} check
{% endif %}
{% endfor %}
{% elif compute_node_ips | length > 0 %}
{% for ip in compute_node_ips %}
    server compute-{{ loop.index0 }} {{ ip }}:{{ haproxy_configuration.ports.http }} check
{% endfor %}
{% endif %}

#---------------------------------------------------------------------
# OKD HTTPS Ingress Frontend
#---------------------------------------------------------------------
frontend ocp4_https_ingress_traffic_fe
    bind :{{ haproxy_configuration.ports.https }}
    default_backend ocp4_https_ingress_traffic_be
    mode tcp
    option tcplog

#---------------------------------------------------------------------
# OKD HTTPS Ingress Backend
#---------------------------------------------------------------------
backend ocp4_https_ingress_traffic_be
    mode tcp
    balance source
{% if infra_node_ips | length > 0 %}
{% for ip in infra_node_ips %}
{% if ip != "OKD4_INFRA_NODE_0_IP" and ip != "OKD4_INFRA_NODE_1_IP" %}
    server infra-{{ loop.index0 }} {{ ip }}:{{ haproxy_configuration.ports.https }} check
{% endif %}
{% endfor %}
{% elif compute_node_ips | length > 0 %}
{% for ip in compute_node_ips %}
    server compute-{{ loop.index0 }} {{ ip }}:{{ haproxy_configuration.ports.https }} check
{% endfor %}
{% endif %}