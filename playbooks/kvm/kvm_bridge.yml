# KVM Bridge Setup Ansible Role

This role automates the setup of a network bridge for KVM virtualization on AlmaLinux 9 (and other RHEL-based distributions). 
This will bring the specified interface down when configuring, a 2nd interface not part of the bridge is assumed to be online to maintain connectivity while playbook is running.

## Directory Structure

```
ansible-kvm-bridge/
├── defaults/
│   └── main.yml
├── handlers/
│   └── main.yml
├── meta/
│   └── main.yml
├── tasks/
│   ├── main.yml
│   ├── bridge_setup.yml
│   └── libvirt_setup.yml
├── templates/
│   └── bridge-network.xml.j2
└── README.md
```

## Installation

Clone this repository to your Ansible roles directory:

```bash
mkdir -p ~/.ansible/roles
git clone https://github.com/yourusername/ansible-kvm-bridge.git ~/.ansible/roles/kvm-bridge
```

Or install it directly from Ansible Galaxy:

```bash
ansible-galaxy install yourusername.kvm-bridge
```

## Role Variables

Edit `defaults/main.yml` to customize the bridge configuration:

```yaml
# Bridge configuration
bridge_name: "br0"
bridge_interface: "eno2"  # Physical interface to attach to bridge
bridge_ip_method: "dhcp"  # Options: dhcp, static
bridge_ip_address: ""     # Set if using static IP, e.g. "192.168.50.10/24"
bridge_gateway: ""        # Set if using static IP, e.g. "192.168.50.1"
bridge_dns: ""            # Set if using static IP, e.g. "192.168.50.1"

# Libvirt configuration
configure_libvirt: true
libvirt_bridge_autostart: true
```

## Example Playbook

```yaml
---
- name: Configure KVM Bridge on hosts
  hosts: kvm_hosts
  become: true
  roles:
    - role: kvm-bridge
      vars:
        bridge_name: "br0"
        bridge_interface: "eno2"  # Replace with your actual interface name
        bridge_ip_method: "static"
        bridge_ip_address: "192.168.50.10/24"
        bridge_gateway: "192.168.50.1"
        bridge_dns: "192.168.50.1"
```

## Usage

1. Edit the playbook to match your host inventory and network settings
2. Run the playbook:

```bash
ansible-playbook kvm-bridge-playbook.yml
```

## File Contents

### tasks/main.yml
```yaml
---
- name: Include bridge setup tasks
  include_tasks: bridge_setup.yml

- name: Include libvirt setup tasks
  include_tasks: libvirt_setup.yml
  when: configure_libvirt | bool
```

### tasks/bridge_setup.yml
```yaml
---
- name: Install required packages
  ansible.builtin.package:
    name:
      - bridge-utils
      - NetworkManager
    state: present

- name: Get existing network connection name for {{ bridge_interface }}
  ansible.builtin.shell: nmcli -g NAME connection show | grep -E "({{ bridge_interface }}|{{ bridge_interface }}-\w+)"
  register: existing_connection
  changed_when: false
  failed_when: false

- name: Remove IP from physical interface
  ansible.builtin.command: "nmcli connection modify {{ existing_connection.stdout }} ipv4.method disabled"
  when: existing_connection.stdout != ""
  register: connection_modified
  changed_when: connection_modified.rc == 0

- name: Check if bridge already exists
  ansible.builtin.command: "nmcli connection show {{ bridge_name }}"
  register: bridge_exists
  changed_when: false
  failed_when: false

- name: Create bridge connection
  ansible.builtin.command: "nmcli connection add type bridge con-name {{ bridge_name }} ifname {{ bridge_name }}"
  when: bridge_exists.rc != 0
  register: bridge_created
  changed_when: bridge_created.rc == 0

- name: Configure bridge with static IP
  ansible.builtin.command: >
    nmcli connection modify {{ bridge_name }}
    ipv4.method manual
    ipv4.addresses "{{ bridge_ip_address }}"
    ipv4.gateway "{{ bridge_gateway }}"
    ipv4.dns "{{ bridge_dns }}"
  when: 
    - bridge_ip_method == "static"
    - bridge_ip_address != ""
    - bridge_gateway != ""
  register: bridge_configured
  changed_when: bridge_configured.rc == 0

- name: Configure bridge with DHCP
  ansible.builtin.command: "nmcli connection modify {{ bridge_name }} ipv4.method auto"
  when: bridge_ip_method == "dhcp"
  register: bridge_configured_dhcp
  changed_when: bridge_configured_dhcp.rc == 0

- name: Check if bridge port already exists
  ansible.builtin.command: "nmcli connection show bridge-{{ bridge_interface }}"
  register: bridge_port_exists
  changed_when: false
  failed_when: false

- name: Add interface to bridge
  ansible.builtin.command: >
    nmcli connection add type ethernet 
    slave-type bridge 
    con-name bridge-{{ bridge_interface }} 
    ifname {{ bridge_interface }} 
    master {{ bridge_name }}
  when: bridge_port_exists.rc != 0
  register: bridge_port_added
  changed_when: bridge_port_added.rc == 0

- name: Enable IP forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    sysctl_set: yes
    reload: yes

- name: Activate bridge connection
  ansible.builtin.command: "nmcli connection up {{ bridge_name }}"
  register: bridge_activated
  changed_when: bridge_activated.rc == 0

- name: Check if bridge is up
  ansible.builtin.command: "ip link show {{ bridge_name }}"
  register: bridge_status
  changed_when: false
  failed_when: false

- name: Restart NetworkManager if bridge is not up
  ansible.builtin.systemd:
    name: NetworkManager
    state: restarted
  when: bridge_status.rc != 0
```

### tasks/libvirt_setup.yml
```yaml
---
- name: Install KVM/libvirt packages
  ansible.builtin.package:
    name: 
      - qemu-kvm
      - libvirt
      - virt-install
      - libvirt-daemon-kvm
    state: present

- name: Ensure libvirtd service is running and enabled
  ansible.builtin.systemd:
    name: libvirtd
    state: started
    enabled: true

- name: Create temporary bridge network XML file
  ansible.builtin.template:
    src: bridge-network.xml.j2
    dest: /tmp/{{ bridge_name }}-network.xml
    owner: root
    group: root
    mode: '0644'

- name: Check if bridge network is already defined in libvirt
  ansible.builtin.command: "virsh net-info {{ bridge_name }}"
  register: net_exists
  changed_when: false
  failed_when: false

- name: Define bridge network
  ansible.builtin.command: "virsh net-define /tmp/{{ bridge_name }}-network.xml"
  when: net_exists.rc != 0
  register: net_defined
  changed_when: net_defined.rc == 0

- name: Start bridge network
  ansible.builtin.command: "virsh net-start {{ bridge_name }}"
  when: net_exists.rc != 0 or "inactive" in net_exists.stdout
  register: net_started
  changed_when: net_started.rc == 0
  failed_when: net_started.rc != 0 and "already active" not in net_started.stderr

- name: Set bridge network to autostart
  ansible.builtin.command: "virsh net-autostart {{ bridge_name }}"
  when: libvirt_bridge_autostart | bool
  register: net_autostart
  changed_when: net_autostart.rc == 0
  failed_when: net_autostart.rc != 0 and "already marked" not in net_autostart.stderr

- name: Remove temporary bridge network XML file
  ansible.builtin.file:
    path: /tmp/{{ bridge_name }}-network.xml
    state: absent
```

### templates/bridge-network.xml.j2
```xml
<network>
  <name>{{ bridge_name }}</name>
  <forward mode="bridge"/>
  <bridge name="{{ bridge_name }}"/>
</network>
```

### handlers/main.yml
```yaml
---
- name: restart networkmanager
  ansible.builtin.systemd:
    name: NetworkManager
    state: restarted

- name: restart libvirtd
  ansible.builtin.systemd:
    name: libvirtd
    state: restarted
```

### meta/main.yml
```yaml
---
galaxy_info:
  author: Your Name
  description: Ansible role for setting up a KVM network bridge
  license: MIT
  min_ansible_version: 2.9
  platforms:
    - name: EL
      versions:
        - 8
        - 9
  galaxy_tags:
    - kvm
    - virtualization
    - networking
    - bridge
    - almalinux
    - rhel

dependencies: []
```

### defaults/main.yml
```yaml
---
# Bridge configuration
bridge_name: "br0"
bridge_interface: "eno2"
bridge_ip_method: "dhcp"
bridge_ip_address: ""
bridge_gateway: ""
bridge_dns: ""

# Libvirt configuration
configure_libvirt: true
libvirt_bridge_autostart: true
```