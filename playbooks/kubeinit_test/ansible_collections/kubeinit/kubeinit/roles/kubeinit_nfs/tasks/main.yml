---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

### DOCUMENTATION
#
# title: Deploy a network share
#
# description: |-
#   The NFS-client provisioner is part of the Kubernetes Incubator project. In a Kubernetes cluster,
#   this provisioner runs in a container that mounts an NFS export from an existing NFS serverâ€”it does not
#   run an NFS server itself. With the container, it listens for PVCs that match its storage class, creates
#   directories within the NFS export, and reports each directory to Kubernetes as a persistent volume.
#   Kubernetes can then mount the volume into a container that uses the volumes from that PVC.
#
# examples: |-
#   - name: Configure NFS
#     ansible.builtin.include_role:
#       name: kubeinit.kubeinit.kubeinit_nfs
#       public: true
#     when: "'nfs' in kubeinit_cluster_hostvars.services"

- name: Install NFS packages
  ansible.builtin.package:
    name: "{{ ['nfs-kernel-server', 'nfs-common'] if (hostvars[kubeinit_deployment_node_name].distribution_family == 'Debian') else ['nfs-utils'] }}"
    state: present

- name: "Configure NFS shares of CentOS based guests"
  ansible.builtin.shell: |
    set -o pipefail
    systemctl enable nfs-server rpcbind
    systemctl start nfs-server rpcbind
    mkdir -p /var/nfsshare
    chmod -R 777 /var/nfsshare
    chown -R nobody:nobody /var/nfsshare
    echo '/var/nfsshare {{ kubeinit_cluster_network }}(rw,sync,no_root_squash,no_all_squash,no_wdelay)' | tee /etc/exports
    setsebool -P nfs_export_all_rw 1
    systemctl restart nfs-server
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  when: hostvars[kubeinit_deployment_node_name].os == 'centos'

- name: "Configure NFS shares of Ubuntu based guests"
  ansible.builtin.shell: |
    set -o pipefail
    mkdir -p /var/nfsshare
    chmod -R 777 /var/nfsshare
    chown -R nobody:nogroup /var/nfsshare
    echo '/var/nfsshare {{ kubeinit_cluster_network }}(rw,sync,no_root_squash,no_all_squash,no_wdelay)' | tee /etc/exports
    exportfs -a
    systemctl restart nfs-kernel-server
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  when: hostvars[kubeinit_deployment_node_name].os == 'ubuntu' or hostvars[kubeinit_deployment_node_name].os == 'debian'

#
# Add nfs dynamic provisioning
#

- name: Add nfs provisioning role
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_rbac.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: nfs-client-provisioner
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: nfs-client-provisioner-runner
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumes"]
        verbs: ["get", "list", "watch", "create", "delete"]
      - apiGroups: [""]
        resources: ["persistentvolumeclaims"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create", "update", "patch"]
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: run-nfs-client-provisioner
    subjects:
      - kind: ServiceAccount
        name: nfs-client-provisioner
        namespace: default
    roleRef:
      kind: ClusterRole
      name: nfs-client-provisioner-runner
      apiGroup: rbac.authorization.k8s.io
    ---
    kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: leader-locking-nfs-client-provisioner
    rules:
      - apiGroups: [""]
        resources: ["endpoints"]
        verbs: ["get", "list", "watch", "create", "update", "patch"]
    ---
    kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: leader-locking-nfs-client-provisioner
    subjects:
      - kind: ServiceAccount
        name: nfs-client-provisioner
        # replace with namespace where provisioner is deployed
        namespace: default
    roleRef:
      kind: Role
      name: leader-locking-nfs-client-provisioner
      apiGroup: rbac.authorization.k8s.io
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_rbac.yaml --request-timeout=1800s
  register: _result
  retries: 5
  delay: 20
  until: _result.rc == 0
  changed_when: "_result.rc == 0"
  args:
    executable: /bin/bash

- name: Add nfs client provisioner deployment
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_client_prov_deployment.yaml
    kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: nfs-client-provisioner
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app: nfs-client-provisioner
      template:
        metadata:
          labels:
            app: nfs-client-provisioner
        spec:
          serviceAccountName: nfs-client-provisioner
          containers:
            - name: nfs-client-provisioner
              image: gcr.io/k8s-staging-sig-storage/nfs-subdir-external-provisioner:v4.0.0
              volumeMounts:
                - name: nfs-client-root
                  mountPath: /persistentvolumes
              env:
                - name: PROVISIONER_NAME
                  value: k8s-sigs.io/nfs-subdir-external-provisioner
                - name: NFS_SERVER
                  value: {{ kubeinit_nfs_service_address }}
                - name: NFS_PATH
                  value: /var/nfsshare
          volumes:
            - name: nfs-client-root
              nfs:
                server: {{ kubeinit_nfs_service_address }}
                path: /var/nfsshare
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_client_prov_deployment.yaml --request-timeout=1800s
  register: _result
  changed_when: "_result.rc == 0"
  args:
    executable: /bin/bash

- name: Add default nfs storage class
  ansible.builtin.shell: |
    cat << EOF > ~/nfs_storage_class.yaml
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: managed-nfs-storage
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
    provisioner: k8s-sigs.io/nfs-subdir-external-provisioner
    parameters:
      archiveOnDelete: "false"
    EOF
    export KUBECONFIG=~/.kube/config
    kubectl apply -f ~/nfs_storage_class.yaml --request-timeout=1800s
  register: _result
  changed_when: "_result.rc == 0"
  args:
    executable: /bin/bash
