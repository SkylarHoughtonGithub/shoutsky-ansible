Param(
    [parameter(Mandatory = $true)] $ManagementIP,
    [parameter(Mandatory = $true)] $Hostname,
    [ValidateSet("l2bridge", "overlay",IgnoreCase = $true)] $NetworkMode="l2bridge",
    [parameter(Mandatory = $false)] $ClusterCIDR="10.244.0.0/16",
    [parameter(Mandatory = $false)] $KubeDnsServiceIP="10.96.0.10",
    [parameter(Mandatory = $false)] $LogDir="C:\k",
    [parameter(Mandatory = $false)] $KubeletSvc="kubelet",
    [parameter(Mandatory = $false)] $KubeProxySvc="kube-proxy",
    [parameter(Mandatory = $false)] $FlanneldSvc="flanneld"
)

# $ManagementIP: is the nodes host IP not the cluster's controller IP

# nssm is already installed
$global:NssmInstallDirectory = "$env:ProgramFiles\nssm"
$env:path += ";$global:NssmInstallDirectory"
$newPath = "$global:NssmInstallDirectory;" +
[Environment]::GetEnvironmentVariable("PATH", [EnvironmentVariableTarget]::Machine)

[Environment]::SetEnvironmentVariable("PATH", $newPath, [EnvironmentVariableTarget]::Machine)

# From: https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/flannel/register-svc.ps1

$GithubSDNRepository = 'Microsoft/SDN'
if ((Test-Path env:GITHUB_SDN_REPOSITORY) -and ($env:GITHUB_SDN_REPOSITORY -ne ''))
{
    $GithubSDNRepository = $env:GITHUB_SDN_REPOSITORY
}

$helper = "c:\k\helper.psm1"
if (!(Test-Path $helper))
{
    curl.exe -L "https://raw.githubusercontent.com/$GithubSDNRepository/master/Kubernetes/windows/helper.psm1" -o c:\k\helper.psm1
}
ipmo $helper

# $Hostname="{{ kubeinit_deployment_node_name }}.{{ kubeinit_cluster_fqdn }}"
$NetworkMode = $NetworkMode.ToLower()
cd c:\k

# This is done at the PrepareRequirements.ps1 step
<#
@"
{
  "Network": "10.244.0.0/16",
  "Backend": {
    "name": "vxlan0",
    "type": "vxlan"
  }
}
"@ | Set-Content "C:\etc\kube-flannel\net-conf.json" -Force
#>

Write-Host "Registering flanneld"
# register flanneld
$Env:NODE_NAME = "$Hostname"
nssm install $FlanneldSvc C:\opt\cni\bin\flanneld.exe
nssm set $FlanneldSvc AppParameters --kubeconfig-file=c:\k\config --iface=$ManagementIP --ip-masq=1 --kube-subnet-mgr=1
nssm set $FlanneldSvc AppEnvironmentExtra NODE_NAME=$Hostname
nssm set $FlanneldSvc AppDirectory C:\etc\kube-flannel\
nssm start $FlanneldSvc

# Running something like:
# $Env:NODE_NAME = "compute-01.k8scluster.kubeinit.local"
# c:\opt\cni\bin\flanneld.exe --kubeconfig-file=c:\k\config --iface=10.0.0.2 --ip-masq=1 --kube-subnet-mgr=1


Write-Host "Registering kube-proxy"
# register kube-proxy
nssm install $KubeProxySvc C:\k\kube-proxy.exe
nssm set $KubeProxySvc AppDirectory c:\k

if ($NetworkMode -eq "l2bridge")
{
    nssm set $KubeProxySvc AppEnvironmentExtra KUBE_NETWORK=cbr0
    nssm set $KubeProxySvc AppParameters --v=4 --proxy-mode=kernelspace --hostname-override=$Hostname --kubeconfig=c:\k\config --cluster-cidr=$ClusterCIDR --log-dir=$LogDir --logtostderr=false
}
elseif ($NetworkMode -eq "overlay")
{
    if((Test-Path c:/k/sourceVip.json))
    {
        $sourceVipJSON = Get-Content sourceVip.json | ConvertFrom-Json
        $sourceVip = $sourceVipJSON.ip4.ip.Split("/")[0]
    }
    nssm set $KubeProxySvc AppParameters --v=4 --proxy-mode=kernelspace --feature-gates="WinOverlay=true" --hostname-override=$Hostname --kubeconfig=c:\k\config --network-name=vxlan0 --source-vip=$sourceVip --enable-dsr=false --cluster-cidr=$ClusterCIDR --log-dir=$LogDir --logtostderr=false
}
nssm set $KubeProxySvc DependOnService $KubeletSvc
nssm start $KubeProxySvc

<#
$env:Path += ";C:\k;C:\Program Files\containerd;C:\Program Files\nssm"

nssm stop containerd
Import-Module "c:\k\hns.psm1"
Get-NetAdapter
get-hnsnetwork | remove-hnsnetwork
Get-NetAdapter

# This will drop the connection for a second
Import-Module "c:\k\hns.psm1"
# We do this when the guest is created
#New-HNSNetwork -Type 'Overlay' -AddressPrefix "10.244.0.0/16" -Gateway "10.244.0.1" -Name "vxlan0" -AdapterName "$((Get-NetAdapter -Physical).Name)"  -SubnetPolicies @(@{Type = "VSID"; VSID = 4096; }) -Verbose


$env:Path += ";C:\k;C:\Program Files\containerd;C:\Program Files\nssm"
Remove-Item c:\etc\cni\net.d\0-containerd-nat.json

#"search": [
#  "svc.k8scluster.kubeinit.local"
#]


@"
{
  "cniVersion": "0.3.0",
  "name": "vxlan0",
  "type": "sdnoverlay",
  "ipam": {
    "type": "host-local",
    "subnet": "10.244.0.0/16"
  },
  "apiVersion": 2,
  "capabilities": {
    "portMappings": true,
    "dns": true
  },
  "policies": [
    {
      "name": "EndpointPolicy",
      "value": {
        "Type": "OutBoundNAT",
        "Settings": {
          "Exceptions": [
            "10.244.0.0/16"
          ]
        }
      }
    },
    {
      "name": "EndpointPolicy",
      "value": {
        "Type": "SDNRoute",
        "Settings": {
          "DestinationPrefix": "10.244.0.0/16",
          "NeedEncap": true
        }
      }
    },
    {
      "name": "EndpointPolicy",
      "value": {
        "Type": "ProviderAddress",
        "Settings": {
          "ProviderAddress": "10.0.0.1"
        }
      }
    }
  ]
}
"@ | Set-Content "c:\etc\cni\net.d\net.json" -Force


nssm restart containerd
nssm restart flanneld
#>

Write-Host "Finishing Script"
